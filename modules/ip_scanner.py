"""
–ú–æ–¥—É–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""
import logging
import socket
import subprocess
import platform
import ipaddress
from datetime import datetime
from typing import List, Dict, Any

import config
from core.database import Database
from core.notification import NotificationManager

logger = logging.getLogger("IPScanner")

class IPScanner:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è IP-–∞–¥—Ä–µ—Å–æ–≤ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    def __init__(self, db: Database, notifier: NotificationManager):
        self.db = db
        self.notifier = notifier
        self.timeout = config.IP_SCAN_TIMEOUT
        self.ip_ranges = config.IP_RANGES
    
    def _ping(self, ip_address: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞ —Å –ø–æ–º–æ—â—å—é ICMP ping
        
        Args:
            ip_address: IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True, –µ—Å–ª–∏ —Ö–æ—Å—Ç –æ—Ç–≤–µ—á–∞–µ—Ç, –∏–Ω–∞—á–µ False
        """
        param = '-n' if platform.system().lower() == 'windows' else '-c'
        command = ['ping', param, '1', '-W', str(self.timeout), ip_address]
        
        try:
            return subprocess.call(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping –¥–æ {ip_address}: {str(e)}")
            return False
    
    def _get_hostname(self, ip_address: str) -> str:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ –ø–æ IP-–∞–¥—Ä–µ—Å—É
        
        Args:
            ip_address: IP-–∞–¥—Ä–µ—Å
            
        Returns:
            str: –ò–º—è —Ö–æ—Å—Ç–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        """
        try:
            return socket.getfqdn(ip_address)
        except Exception as e:
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞ –¥–ª—è {ip_address}: {str(e)}")
            return ""
    
    def _scan_single_ip(self, ip_address: str) -> Dict[str, Any]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
        
        Args:
            ip_address: IP-–∞–¥—Ä–µ—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ IP-–∞–¥—Ä–µ—Å–∞
        """
        is_up = self._ping(ip_address)
        hostname = self._get_hostname(ip_address) if is_up else ""
        
        return {
            "ip_address": ip_address,
            "is_up": is_up,
            "hostname": hostname,
            "scan_time": datetime.now()
        }
    
    def _expand_ip_ranges(self) -> List[str]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ IP –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤
        
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤
        """
        all_ips = []
        
        for ip_range in self.ip_ranges:
            ip_range = ip_range.strip()
            if not ip_range:
                continue
                
            try:
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ CIDR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.0/24)
                if "/" in ip_range:
                    network = ipaddress.ip_network(ip_range, strict=False)
                    all_ips.extend([str(ip) for ip in network.hosts()])
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.1-192.168.1.10)
                elif "-" in ip_range:
                    start_ip, end_ip = ip_range.split("-")
                    start_ip = ipaddress.IPv4Address(start_ip.strip())
                    end_ip = ipaddress.IPv4Address(end_ip.strip())
                    all_ips.extend([str(ipaddress.IPv4Address(ip)) for ip in range(int(start_ip), int(end_ip) + 1)])
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
                else:
                    all_ips.append(ip_range)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ IP {ip_range}: {str(e)}")
        
        return all_ips
    
    def scan(self) -> List[Dict[str, Any]]:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö IP-–∞–¥—Ä–µ—Å–æ–≤ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        results = []
        changes = []
        ip_addresses = self._expand_ip_ranges()
        
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {len(ip_addresses)} IP-–∞–¥—Ä–µ—Å–æ–≤")
        
        for ip in ip_addresses:
            try:
                scan_result = self._scan_single_ip(ip)
                results.append(scan_result)
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                previous_state = self.db.get_ip_state(ip)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if previous_state is None:
                    self.db.save_ip_state(scan_result)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                if (previous_state["is_up"] != scan_result["is_up"] or
                    previous_state["hostname"] != scan_result["hostname"]):
                    
                    change = {
                        "ip_address": ip,
                        "old_state": previous_state,
                        "new_state": scan_result,
                        "change_time": datetime.now()
                    }
                    
                    changes.append(change)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                    self.db.save_ip_change(change)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    self.db.save_ip_state(scan_result)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    self._notify_change(change)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ IP {ip}: {str(e)}")
        
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        return changes
    
    def _notify_change(self, change: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è IP
        
        Args:
            change: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        """
        ip = change["ip_address"]
        old_state = change["old_state"]
        new_state = change["new_state"]
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if old_state["is_up"] != new_state["is_up"]:
            if new_state["is_up"]:
                title = f"üü¢ IP {ip} —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω"
                message = f"IP-–∞–¥—Ä–µ—Å {ip} —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–∏–Ω–≥–∏.\n"
                if new_state["hostname"]:
                    message += f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞: {new_state['hostname']}"
            else:
                title = f"üî¥ IP {ip} —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                message = f"IP-–∞–¥—Ä–µ—Å {ip} –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø–∏–Ω–≥–∏.\n"
                message += f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è —Ö–æ—Å—Ç–∞: {old_state['hostname']}"
        elif old_state["hostname"] != new_state["hostname"]:
            title = f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ –¥–ª—è IP {ip}"
            message = f"–î–ª—è IP-–∞–¥—Ä–µ—Å–∞ {ip} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è —Ö–æ—Å—Ç–∞.\n"
            message += f"–°—Ç–∞—Ä–æ–µ –∏–º—è: {old_state['hostname']}\n"
            message += f"–ù–æ–≤–æ–µ –∏–º—è: {new_state['hostname']}"
        else:
            return  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notifier.send_notification(title, message)