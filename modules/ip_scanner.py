import logging
import socket
import subprocess
import platform
import ipaddress
from datetime import datetime
from typing import List, Dict, Any, Optional

import config
from core.database import Database
from core.notification import NotificationManager

logger = logging.getLogger("IPScanner")

class IPScanner:
    def __init__(self, db: Database, notifier: NotificationManager):
        self.db = db
        self.notifier = notifier
        self.timeout = config.IP_SCAN_TIMEOUT
        self.ip_ranges = config.IP_RANGES

    def _ping(self, ip_address: str) -> bool:
        param = '-n' if platform.system().lower() == 'windows' else '-c'
        command = ['ping', param, '1', '-W', str(self.timeout), ip_address]
        try:
            return subprocess.call(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping –¥–æ {ip_address}: {str(e)}")
            return False

    def _get_hostname(self, ip_address: str) -> str:
        try:
            return socket.getfqdn(ip_address)
        except Exception as e:
            logger.debug(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞ –¥–ª—è {ip_address}: {str(e)}")
            return ""

    def _scan_single_ip(self, ip_address: str) -> Dict[str, Any]:
        is_up = self._ping(ip_address)
        hostname = self._get_hostname(ip_address) if is_up else ""
        return {
            "ip_address": ip_address,
            "is_up": is_up,
            "hostname": hostname,
            "scan_time": datetime.now(),
            "description": ""  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

    def _expand_ip_ranges(self) -> List[str]:
        all_ips = []
        for ip_range in self.ip_ranges:
            ip_range = ip_range.strip()
            try:
                if "/" in ip_range:
                    network = ipaddress.ip_network(ip_range, strict=False)
                    all_ips.extend([str(ip) for ip in network.hosts()])  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç—ã
                elif "-" in ip_range:
                    start_ip, end_ip = ip_range.split("-")
                    start_ip = ipaddress.IPv4Address(start_ip.strip())
                    end_ip = ipaddress.IPv4Address(end_ip.strip())

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
                    if start_ip > end_ip:
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {ip_range}. –ù–∞—á–∞–ª—å–Ω—ã–π IP –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ.")
                        continue

                    all_ips.extend([str(ipaddress.IPv4Address(ip)) for ip in range(int(start_ip), int(end_ip) + 1)])
                else:
                    all_ips.append(ip_range)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ IP {ip_range}: {str(e)}")
        return all_ips


    def scan(self, ip_list: Optional[List[str]] = None) -> List[Dict[str, Any]]:
        if ip_list is None:
            ip_addresses = self._expand_ip_ranges()
        else:
            ip_addresses = ip_list
        results = []
        changes = []
        logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {len(ip_addresses)} IP-–∞–¥—Ä–µ—Å–æ–≤")
        for ip in ip_addresses:
            try:
                scan_result = self._scan_single_ip(ip)
                results.append(scan_result)
                previous_state = self.db.get_ip_state(ip)
                if previous_state is None:
                    self.db.save_ip_state(scan_result)
                    continue
                if (previous_state["is_up"] != scan_result["is_up"] or
                        previous_state["hostname"] != scan_result["hostname"]):
                    change = {
                        "ip_address": ip,
                        "old_state": previous_state,
                        "new_state": scan_result,
                        "change_time": datetime.now()
                    }
                    changes.append(change)
                    self.db.save_ip_change(change)
                    self.db.save_ip_state(scan_result)
                    self._notify_change(change)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ IP {ip}: {str(e)}")
        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        return changes

    def _notify_change(self, change: Dict[str, Any]) -> None:
        ip = change["ip_address"]
        old_state = change["old_state"]
        new_state = change["new_state"]
        if old_state["is_up"] != new_state["is_up"]:
            if new_state["is_up"]:
                title = f"üü¢ IP {ip} —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω"
                message = f"IP-–∞–¥—Ä–µ—Å {ip} —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–∏–Ω–≥–∏.\n"
                if new_state["hostname"]:
                    message += f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞: {new_state['hostname']}"
            else:
                title = f"üî¥ IP {ip} —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                message = f"IP-–∞–¥—Ä–µ—Å {ip} –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø–∏–Ω–≥–∏.\n"
                message += f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–º—è —Ö–æ—Å—Ç–∞: {old_state['hostname']}"
        elif old_state["hostname"] != new_state["hostname"]:
            title = f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ –¥–ª—è IP {ip}"
            message = f"–î–ª—è IP-–∞–¥—Ä–µ—Å–∞ {ip} –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–º—è —Ö–æ—Å—Ç–∞.\n"
            message += f"–°—Ç–∞—Ä–æ–µ –∏–º—è: {old_state['hostname']}\n"
            message += f"–ù–æ–≤–æ–µ –∏–º—è: {new_state['hostname']}"
        else:
            return
        self.notifier.send_notification(title, message)