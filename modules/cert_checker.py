"""
–ú–æ–¥—É–ª—å –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
"""
import logging
import socket
import ssl
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from urllib.parse import urlparse

import config
from core.database import Database
from core.notification import NotificationManager

logger = logging.getLogger("CertificateChecker")

class CertificateChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    
    def __init__(self, db: Database, notifier: NotificationManager):
        self.db = db
        self.notifier = notifier
        self.websites = config.WEBSITES
        self.expiry_alert_days = config.CERT_EXPIRY_ALERT_DAYS
    
    def _get_domain_from_url(self, url: str) -> str:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL
        
        Args:
            url: URL –≤–µ–±-—Å–∞–π—Ç–∞
            
        Returns:
            str: –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
            
        parsed_url = urlparse(url)
        return parsed_url.netloc.split(':')[0]  # –£–¥–∞–ª—è–µ–º –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    
    def _get_cert_info(self, domain: str, port: int = 443) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        
        Args:
            domain: –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è
            port: –ü–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 443)
            
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        """
        context = ssl.create_default_context()
        conn = context.wrap_socket(socket.socket(socket.AF_INET), server_hostname=domain)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        conn.settimeout(10)
        
        try:
            conn.connect((domain, port))
            cert = conn.getpeercert()
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
            subject = dict(x[0] for x in cert['subject'])
            issuer = dict(x[0] for x in cert['issuer'])
            not_before = datetime.strptime(cert['notBefore'], '%b %d %H:%M:%S %Y %Z')
            not_after = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏–º–µ–Ω (SAN)
            san = []
            if 'subjectAltName' in cert:
                san = [x[1] for x in cert['subjectAltName'] if x[0] == 'DNS']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ—Ä–æ –ª–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            now = datetime.now()
            days_to_expiry = (not_after - now).days
            is_expiring = days_to_expiry <= self.expiry_alert_days
            is_expired = days_to_expiry <= 0
            
            return {
                "domain": domain,
                "common_name": subject.get('commonName', 'N/A'),
                "issuer": issuer.get('commonName', 'N/A'),
                "organization": subject.get('organizationName', 'N/A'),
                "not_before": not_before,
                "not_after": not_after,
                "days_to_expiry": days_to_expiry,
                "is_expiring": is_expiring,
                "is_expired": is_expired,
                "san": san,
                "check_time": datetime.now(),
                "error": None
            }
            
        except socket.gaierror:
            return {"domain": domain, "error": "DNS resolution failed", "check_time": datetime.now()}
        except socket.timeout:
            return {"domain": domain, "error": "Connection timeout", "check_time": datetime.now()}
        except ssl.SSLCertVerificationError as e:
            return {"domain": domain, "error": f"SSL verification error: {str(e)}", "check_time": datetime.now()}
        except Exception as e:
            return {"domain": domain, "error": str(e), "check_time": datetime.now()}
        finally:
            conn.close()
    
    def check_all(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = []
        expiring_certs = []
        error_count = 0
        
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –¥–ª—è {len(self.websites)} –¥–æ–º–µ–Ω–æ–≤")
        
        for url in self.websites:
            try:
                domain = self._get_domain_from_url(url)
                cert_info = self._get_cert_info(domain)
                results.append(cert_info)
                
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
                if cert_info.get("error"):
                    error_count += 1
                    self._notify_cert_error(cert_info)
                    continue
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
                self.db.save_cert_info(cert_info)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
                if cert_info["is_expired"]:
                    expiring_certs.append(cert_info)
                    self._notify_cert_expired(cert_info)
                elif cert_info["is_expiring"]:
                    expiring_certs.append(cert_info)
                    self._notify_cert_expiring(cert_info)
                    
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
                previous_cert = self.db.get_cert_info(domain)
                if previous_cert and previous_cert["not_after"] != cert_info["not_after"]:
                    self._notify_cert_changed(previous_cert, cert_info)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {url}: {str(e)}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {len(expiring_certs)} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—Ç, {error_count} –æ—à–∏–±–æ–∫.")
        
        return {
            "results": results,
            "expiring": expiring_certs,
            "expiring_count": len(expiring_certs),
            "error_count": error_count
        }
    
    def _notify_cert_expiring(self, cert_info: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Args:
            cert_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        """
        domain = cert_info["domain"]
        days = cert_info["days_to_expiry"]
        
        title = f"‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {domain} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π"
        message = f"SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π!\n\n"
        message += f"–ò–∑–¥–∞—Ç–µ–ª—å: {cert_info['issuer']}\n"
        message += f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {cert_info['not_after'].strftime('%d.%m.%Y')}\n"
        message += f"–û–±—â–µ–µ –∏–º—è: {cert_info['common_name']}\n"
        
        if cert_info['organization'] != 'N/A':
            message += f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {cert_info['organization']}\n"
        
        self.notifier.send_notification(title, message, priority="medium")
    
    def _notify_cert_expired(self, cert_info: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫—à–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        
        Args:
            cert_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        """
        domain = cert_info["domain"]
        
        title = f"üî¥ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {domain} –ò–°–¢–ï–ö!"
        message = f"SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain} –∏—Å—Ç–µ–∫!\n\n"
        message += f"–ò–∑–¥–∞—Ç–µ–ª—å: {cert_info['issuer']}\n"
        message += f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫: {cert_info['not_after'].strftime('%d.%m.%Y')}\n"
        message += f"–û–±—â–µ–µ –∏–º—è: {cert_info['common_name']}\n"
        
        if cert_info['organization'] != 'N/A':
            message += f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {cert_info['organization']}\n"
        
        self.notifier.send_notification(title, message, priority="high")
    
    def _notify_cert_error(self, cert_info: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Args:
            cert_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        """
        domain = cert_info["domain"]
        error = cert_info["error"]
        
        title = f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {domain}"
        message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}.\n"
        message += f"–û—à–∏–±–∫–∞: {error}\n"
        
        self.notifier.send_notification(title, message, priority="high")
    
    def _notify_cert_changed(self, old_cert: Dict[str, Any], new_cert: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        Args:
            old_cert: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
            new_cert: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ
        """
        domain = new_cert["domain"]
        
        title = f"‚ÑπÔ∏è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {domain} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω"
        message = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –¥–æ–º–µ–Ω–∞ {domain}.\n\n"
        message += "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ:\n"
        message += f"–ò–∑–¥–∞—Ç–µ–ª—å: {new_cert['issuer']}\n"
        message += f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: —Å {new_cert['not_before'].strftime('%d.%m.%Y')} –ø–æ {new_cert['not_after'].strftime('%d.%m.%Y')}\n"
        message += f"–û–±—â–µ–µ –∏–º—è: {new_cert['common_name']}\n"
        
        if new_cert['organization'] != 'N/A':
            message += f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {new_cert['organization']}\n"
        
        self.notifier.send_notification(title, message, priority="medium")