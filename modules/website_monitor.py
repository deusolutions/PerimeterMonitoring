"""
–ú–æ–¥—É–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤
"""
import logging
import requests
import time
from datetime import datetime
from typing import Dict, List, Any, Tuple, Optional
from urllib.parse import urlparse

import config
from core.database import Database
from core.notification import NotificationManager

logger = logging.getLogger("WebsiteMonitor")

class WebsiteMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–∞–π—Ç–æ–≤"""
    
    def __init__(self, db: Database, notifier: NotificationManager):
        self.db = db
        self.notifier = notifier
        self.websites = config.WEBSITES
        self.timeout = config.WEBSITE_TIMEOUT
        self.alert_status_codes = config.HTTP_STATUS_ALERT
    
    def _check_website(self, url: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –≤–µ–±-—Å–∞–π—Ç–∞
        
        Args:
            url: URL –≤–µ–±-—Å–∞–π—Ç–∞
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        start_time = time.time()
        result = {
            "url": url,
            "is_up": False,
            "status_code": None,
            "response_time": None,
            "error": None,
            "check_time": datetime.now()
        }
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
                
            headers = {
                'User-Agent': 'PerimeterMonitor/1.0 (Security Monitoring)'
            }
            
            response = requests.get(url, timeout=self.timeout, headers=headers, allow_redirects=True)
            
            result["is_up"] = response.status_code < 400
            result["status_code"] = response.status_code
            result["response_time"] = round((time.time() - start_time) * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
            if response.status_code in self.alert_status_codes:
                result["is_up"] = False
                result["error"] = f"HTTP —Å—Ç–∞—Ç—É—Å {response.status_code}"
            
        except requests.exceptions.Timeout:
            result["error"] = "Timeout"
        except requests.exceptions.ConnectionError:
            result["error"] = "Connection Error"
        except requests.exceptions.TooManyRedirects:
            result["error"] = "Too Many Redirects"
        except requests.exceptions.SSLError:
            result["error"] = "SSL Error"
        except Exception as e:
            result["error"] = str(e)
            
        return result
    
    def check_all(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–µ–±-—Å–∞–π—Ç–æ–≤
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = []
        changes = []
        down_count = 0
        
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(self.websites)} –≤–µ–±-—Å–∞–π—Ç–æ–≤")
        
        for url in self.websites:
            try:
                check_result = self._check_website(url)
                results.append(check_result)
                
                if not check_result["is_up"]:
                    down_count += 1
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                previous_state = self.db.get_website_state(url)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if previous_state is None:
                    self.db.save_website_state(check_result)
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                if previous_state["is_up"] != check_result["is_up"]:
                    change = {
                        "url": url,
                        "old_state": previous_state,
                        "new_state": check_result,
                        "change_time": datetime.now()
                    }
                    
                    changes.append(change)
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                    self.db.save_website_change(change)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    self._notify_status_change(change)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                self.db.save_website_state(check_result)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∞–π—Ç–∞ {url}: {str(e)}")
        
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–∞–π—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {down_count} —Å–∞–π—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞.")
        
        return {
            "results": results,
            "changes": changes,
            "down_count": down_count
        }
    
    def _notify_status_change(self, change: Dict[str, Any]) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ–±-—Å–∞–π—Ç–∞
        
        Args:
            change: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        """
        url = change["url"]
        old_state = change["old_state"]
        new_state = change["new_state"]
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not old_state["is_up"] and new_state["is_up"]:
            # –°–∞–π—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
            title = f"üü¢ –°–∞–π—Ç {url} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω"
            message = f"–í–µ–±-—Å–∞–π—Ç {url} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É.\n"
            message += f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {new_state['response_time']} –º—Å\n"
            message += f"HTTP —Å—Ç–∞—Ç—É—Å: {new_state['status_code']}"
        elif old_state["is_up"] and not new_state["is_up"]:
            # –°–∞–π—Ç —É–ø–∞–ª
            title = f"üî¥ –°–∞–π—Ç {url} —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            message = f"–í–µ–±-—Å–∞–π—Ç {url} –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å!\n"
            if new_state["error"]:
                message += f"–û—à–∏–±–∫–∞: {new_state['error']}\n"
            if new_state["status_code"]:
                message += f"HTTP —Å—Ç–∞—Ç—É—Å: {new_state['status_code']}\n"
        else:
            return  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notifier.send_notification(title, message, priority="high" if not new_state["is_up"] else "normal")